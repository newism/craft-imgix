<?php

namespace Newism\Imgix\controllers;

use Craft;
use craft\elements\Asset;
use craft\helpers\FileHelper;
use craft\web\Controller;
use craft\web\Request;
use craft\web\Response;
use Newism\Imgix\Plugin;
use Solspace\Freeform\Freeform;
use Solspace\Freeform\Library\Composer\Components\Form;
use yii\web\BadRequestHttpException;

class AssetController extends Controller
{
    protected int|bool|array $allowAnonymous = true;
    public $enableCsrfValidation = false;

    public function actionDownload(Request $request, string $assetPath): \yii\web\Response
    {
        $assetId = $this->request->get('assetId');

        if (empty($assetId)) {
            throw new BadRequestHttpException(Craft::t('app', 'The asset you’re trying to download does not exist.'));
        }

        /** @var Asset[] $assets */
        $asset = Asset::find()
            ->id($assetId)
            ->one();

        if (empty($asset)) {
            throw new BadRequestHttpException(Craft::t('app', 'The asset you’re trying to download does not exist.'));
        }

        if (!str_contains($asset->getUrl(), $assetPath)) {
            throw new BadRequestHttpException(Craft::t('app', 'The asset you’re trying to download does not exist or match the path.'));
        }

        // use a signed hash to verify the download request is valid and was generated by ImgixService::generateUrl
        $assetSignature = $this->request->get('assetSignature');
        $expectedSignature = Plugin::$plugin->imgix->generateDownloadSignature($asset);
        $signatureIsValid = Plugin::$plugin->imgix->validateDownloadSignature($asset, $assetSignature);
        if (!$signatureIsValid || $assetSignature !== $expectedSignature) {
            throw new BadRequestHttpException(Craft::t('app', 'Signature was incorrect.'));
        }

        // confirm the asset is in a volume that is configured to use Imgix and has serveNonImagesDirectly enabled
        $volumeSettings = Plugin::$plugin->imgix->getSettingsForVolume($asset->getVolume());
        $isEnabled = $volumeSettings['enabled'];
        $serveNonImagesDirectly = $volumeSettings['serveNonImagesDirectly'];
        if (!$isEnabled || !$serveNonImagesDirectly) {
            throw new BadRequestHttpException(Craft::t('app', 'The asset you’re trying to download does not exist or is not available for direct download.'));
        }

        // implement asset caching if the volume is a non-local volume
        $cacheKey = 'newism-imgix-download-' . $asset->id . '-' . md5($asset->getPath());
        $fs = $asset->getVolume()->getFs();
        if (is_a($fs, 'craft\awss3\Fs')) {
            $cachedLocalCopy = Craft::$app->cache->get($cacheKey);

            // if there's a local version cached and the file exists, serve it
            if ($cachedLocalCopy && file_exists($cachedLocalCopy)) {
                return $this->response
                    ->sendFile($cachedLocalCopy, $asset->getFilename(), [
                        'fileSize' => $asset->size,
                        'mimeType' => $asset->getMimeType(),
                    ]);
            }

            // no local version yet so try and get a local copy to serve
            $localCopy = $asset->getCopyOfFile();
            if ($localCopy) {
                Craft::$app->cache->set($cacheKey, $localCopy);
                // if the file doesn't exist something went wrong so just stream it
                if (file_exists($localCopy)) {
                    return $this->response
                        ->sendFile($localCopy, $asset->getFilename(), [
                            'fileSize' => $asset->size,
                            'mimeType' => $asset->getMimeType(),
                        ]);
                }
            }
        }

        // finally just stream the file from the volume
        return $this->response
            ->sendStreamAsFile($asset->getStream(), $asset->getFilename(), [
                'fileSize' => $asset->size,
                'mimeType' => $asset->getMimeType(),
            ]);
    }
}
